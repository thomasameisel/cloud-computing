Notes:
1. Only file you need to modify is networking_application.py
2. In networking_application.py, look at the last function (main) first. 
3. You will need to implement addHosts, addSwitches, addLinks, and networking_application functions in this file which get called in main.
4. Don't remove log messages (info(..)). Write relevant code immediately after the log message.
5. For the very first time "vagrant up" should take 25-30 minutes since it will need to download and install (1) ubuntu (2) mininet (3) docker and (4) ACE. 
   However from next time it should run in less that a minute, unless you destroyed VM using "vagrant destroy".
6. When you execute "vagrant up" for the first time in the folder, there will be lot of warnings/errors (in red). Ignore them.
7. If in doubt, you can verify if "vagrant up" did everything it is supposed to do by logging into the guest VM and issuing following commands
   1. which mn: It should show location of mininet executable
   2. mn --version: It should show mn version (mininet version)
   3. which docker: should show location of docker executable
   4. docker --version: It should show docker version.
   5. sudo service docker.io status: it should say start/running with process number
   6. sudo docker images: it should show two images one is ubuntu:14.04 and other is myace:v1 image 
8. Once VM is up after first "vagrant up"; later you can use "vagrant provision" to just run networking_application.sh.

Flow of Operations:
1. On vagrant up, Vagrantfile creates a VM of 1024MB RAM, 2 processor cores, Ubuntu 14.04 OS. and then calls bootstrap.sh
2. Bootstrap.sh installs mininet and docker in the VM. It also creates an myace:v1 image docker image with ACE installed in it(as was in Assignment-3). Then it calls networking_application.sh
3. Networking_application.sh should create five hosts(h1, h2, h3, h4, h5) and three switches(s1, s2, s3) as per following topology
   s1-----s2----s3
   /\     /\     |
  h1 h2  h4 h5   h3
4. All hosts h1, h2, h3, h4, h5 are docker cotainers created from myace:v1 image.
5. h1, h2 and h3 run server from /home/ACE/examples/Cloud-292-Assignment-4-Application/server
6. h4, h5 client from /home/ACE/examples/Cloud-292-Assignment-4-Application/client
7. h4 has primary as h1 and backup as h3
8. h5 has primary as h2 and backup as h3
9.  case 1: Normal Case: when all links are working
10. case 2: Fault  Case: when s1---s2 link is down.



